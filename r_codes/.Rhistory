genes <- c("LIMD1", "TCF7L2", "ABCC1", "RPN2", "HNRNPD",
"TF", "HIST1H3B", "IL10RA", "DIEXF", "UPP1",
"P4HB", "EGFR", "RIF1", "RANBP10", "LPAR1",
"SFPQ", "MAN1A2", "ANKHD1-EIF4EBP3///ANKHD1", "MBNL1", "FUBP1",
"CORT", "NR2E3", "EGR1", "GALNT14", "KLF5",
"COQ9", "PPP2CB", "BRE", "PLA2G5", "PCGF1")
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "ALL",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
# Load the libraries
library(clusterProfiler)
library(org.Hs.eg.db) # For human gene annotation
library(enrichplot)
library(ggplot2)
update.packages(ask = FALSE, checkBuilt = TRUE)
# Load the libraries
library(clusterProfiler)
library(org.Hs.eg.db) # For human gene annotation
library(enrichplot)
library(ggplot2)
update.packages(ask = FALSE, checkBuilt = TRUE)
genes <- c("LIMD1", "TCF7L2", "ABCC1", "RPN2", "HNRNPD",
"TF", "HIST1H3B", "IL10RA", "DIEXF", "UPP1",
"P4HB", "EGFR", "RIF1", "RANBP10", "LPAR1",
"SFPQ", "MAN1A2", "ANKHD1-EIF4EBP3///ANKHD1", "MBNL1", "FUBP1",
"CORT", "NR2E3", "EGR1", "GALNT14", "KLF5",
"COQ9", "PPP2CB", "BRE", "PLA2G5", "PCGF1")
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "ALL",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
# View summary of enrichment
summary(go_enrichment)
go_enrichment <- gseGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "ALL",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
# View summary of enrichment
summary(go_enrichment)
enrichGO
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "ALL",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "CC",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "CC",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.25,
qvalueCutoff = 0.05)
# View summary of enrichment
summary(go_enrichment)
#qvalueCutoff = 0.05)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "CC",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.25,
#qvalueCutoff = 0.05)
# Load the libraries
library(clusterProfiler)
library(org.Hs.eg.db) # For human gene annotation
# Install necessary packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
# Load the libraries
library(clusterProfiler)
library(org.Hs.eg.db) # For human gene annotation
library(enrichplot)
library(ggplot2)
update.packages(ask = FALSE, checkBuilt = TRUE)
genes <- c("LIMD1", "TCF7L2", "ABCC1", "RPN2", "HNRNPD",
"TF", "HIST1H3B", "IL10RA", "DIEXF", "UPP1",
"P4HB", "EGFR", "RIF1", "RANBP10", "LPAR1",
"SFPQ", "MAN1A2", "ANKHD1-EIF4EBP3///ANKHD1", "MBNL1", "FUBP1",
"CORT", "NR2E3", "EGR1", "GALNT14", "KLF5",
"COQ9", "PPP2CB", "BRE", "PLA2G5", "PCGF1")
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "MF",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "MF",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.1,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "MF",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.15,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "MF",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.1,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "MF",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.15,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
# Dot plot for the GO enrichment results
dotplot(go_enrichment, showCategory = 20) + ggtitle("GO Enrichment Analysis (CC)")
# Dot plot for the GO enrichment results
dotplot(go_enrichment, showCategory = 20) + ggtitle("GO Enrichment Analysis (MF)")
# Bar plot for the GO enrichment results
barplot(go_enrichment, showCategory = 20) + ggtitle("GO Enrichment Analysis (MF)")
# GO term network plot
#cnetplot(go_enrichment, showCategory = 10, foldChange = NULL) + ggtitle("GO Term Network (CC)")
library(ggplot2)
cnetplot(go_enrichment, showCategory = 10) +
ggtitle("GO Term Network (CC)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
cnetplot(go_enrichment, showCategory = 10) +
ggtitle("GO Term Network (MF)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
# Now create the enrichment map plot (emapplot)
emapplot(go_enrichment_sim, showCategory = 10) +
ggtitle("GO Term Enrichment Map (MF)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
# Calculate the term similarity matrix
go_enrichment_sim <- pairwise_termsim(go_enrichment)
# Now create the enrichment map plot (emapplot)
emapplot(go_enrichment_sim, showCategory = 10) +
ggtitle("GO Term Enrichment Map (MF)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
# View summary of enrichment
summary(go_enrichment)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "BP",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
#qvalueCutoff = 0.05
)
# Perform GO enrichment analysis
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "BP",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
go_enrichment <- enrichGO(gene         = genes,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",  # Indicating the key type is SYMBOL
ont          = "BP",    # You can choose BP (Biological Process), MF (Molecular Function), CC (Cellular Component), or ALL
#pAdjustMethod = "BH",    # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.07,
#qvalueCutoff = 0.05
)
# View summary of enrichment
summary(go_enrichment)
# Dot plot for the GO enrichment results
dotplot(go_enrichment, showCategory = 20) + ggtitle("GO Enrichment Analysis (MF)")
# Dot plot for the GO enrichment results
dotplot(go_enrichment, showCategory = 20) + ggtitle("GO Enrichment Analysis (BP)")
# Bar plot for the GO enrichment results
barplot(go_enrichment, showCategory = 20) + ggtitle("GO Enrichment Analysis (BP)")
# GO term network plot
#cnetplot(go_enrichment, showCategory = 10, foldChange = NULL) + ggtitle("GO Term Network (CC)")
library(ggplot2)
cnetplot(go_enrichment, showCategory = 10) +
ggtitle("GO Term Network (MF)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
# Just the gene symbols (no fold change values)
cnetplot(go_enrichment, showCategory = 10) +
ggtitle("GO Term Network (BP)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
# Calculate the term similarity matrix
go_enrichment_sim <- pairwise_termsim(go_enrichment)
# Now create the enrichment map plot (emapplot)
emapplot(go_enrichment_sim, showCategory = 10) +
ggtitle("GO Term Enrichment Map (BP)") +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  # Center the title, bold, and increase size
plot.margin = margin(20, 20, 20, 20),  # Add padding around the plot
plot.subtitle = element_text(margin = margin(b = 20))  # Space below the title
)
# Load libraries
library(pheatmap)
library(readr)
update.packages(ask = FALSE, checkBuilt = TRUE)
# Load libraries
library(pheatmap)
# Load libraries
install.packages("pheatmap")  # if not already installed
library(pheatmap)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(pheatmap)
library(readr)
# Read the distance matrix
distance_matrix <- read_csv("GSE5281_top_4000_2000_rfe_series_matrix_cleaned.csv")
# Read the distance matrix
distance_matrix <- read_csv("GSE5281_series_matrix_cleaned_euclidean_distance_matrix.csv",header=FALSE)
# Read the distance matrix
distance_matrix <- read_csv("GSE5281_series_matrix_cleaned_euclidean_distance_matrix.csv"
# Read the distance matrix
distance_matrix <- read_csv("GSE5281_series_matrix_cleaned_euclidean_distance_matrix.csv"
library(affy)
library(affyPLM)
if (!requireNamespace("affyPLM", quietly = TRUE)) {
BiocManager::install("affyPLM")
}
library(affy)
library(affyPLM)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(affy)
library(affyPLM)
# Set the directory where your CEL files are located
cel_files_directory <- "cel_files"  # Replace with your actual path
# Read the CEL files
data_raw <- ReadAffy(celfile.path = cel_files_directory)
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue")
png("boxplot_raw_cel_larger.png", width=1200, height=800, res=150)
par(cex.axis=0.7, las=2)  # Adjust axis label size and rotate them vertically
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue", cex.main=1.5, cex.lab=1.2)
dev.off()
png("boxplot_raw_cel_larger.png", width=1200, height=800, res=150)
par(cex.axis=0.7, las=2)  # Adjust axis label size and rotate them vertically
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue", cex.main=1.5, cex.lab=1.2)
dev.off()
# Read the CEL files
data_raw <- ReadAffy(celfile.path = cel_files_directory)
png("boxplot_raw_cel_larger.png", width=1200, height=800, res=150)
par(cex.axis=0.7, las=2)  # Adjust axis label size and rotate them vertically
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue", cex.main=1.5, cex.lab=1.2)
dev.off()
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue")
data_raw <- ReadAffy(celfile.path = cel_files_directory)
par(mai = c(1.5, 1.5, 1, 1))  # Increase bottom and left margins (inches)
par(cex.axis = 0.8, cex.lab = 1.5, cex.main = 1.8)  # Adjust label and title sizes
# Create the larger box plot
boxplot(data_raw,
main = "Boxplot of Raw .CEL Files",
col = "lightblue",
boxwex = 2)
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue")
# Get sample names to use as x-axis labels
sample_names <- sampleNames(data_raw)
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2)  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2,ylim = c(2, 16))  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2)  # las = 2 makes labels vertical
# Increase visual box height by zooming into the y-axis range
# Use ylim to "zoom in" on the data
ylim_range <- c(3, 15)  # Adjust based on your data distribution
# Control box width using `boxwex` (default is 0.8, increase it for zoom)
box_width <- 1.2  # Increase this for wider boxes
# Adjust plot margins to give more space (bottom, left, top, right)
par(mar = c(7, 5, 4, 2) + 0.1)
# Create boxplot with zoomed boxes
boxplot(data_raw, main = "Zoomed Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2, ylim = ylim_range, boxwex = box_width)
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2)  # las = 2 makes labels vertical
# Create boxplot with zoomed boxes
boxplot(data_raw, main = "Zoomed Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2, ylim = ylim_range, boxwex = box_width)
# Adjust margins to reduce space between x-axis and boxes
par(mar = c(5, 4, 4, 2) + 0.1)  # Bottom margin reduced to bring the plot closer to x-axis
# Increase the height scale
height_scaling_factor <- 1.5  # Change this to adjust height scaling
# Create the boxplot with increased height (without shifting away from x-axis)
boxplot(data_raw, main = "Boxplot with Increased Box Height", col = "lightblue",
names = sample_names, las = 2, boxwex = 0.8,
ylim = range(exprs(data_raw)) * c(0.8, height_scaling_factor))
# Summary before normalization
boxplot(data_raw, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2)  # las = 2 makes labels vertical
# Normalize the data using RMA
data_normalized <- rma(data_raw)
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2)  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2,ylim = c(0, 6))  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2,ylim = c(0, 3))  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2,ylim = c(0, 30))  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2,ylim = c(0, 10))  # las = 2 makes labels vertical
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
# Summary before normalization
boxplot(data_normalized, main = "Boxplot of Raw .CEL Files", col = "lightblue",
names = sample_names, las = 2)  # las = 2 makes labels vertical
